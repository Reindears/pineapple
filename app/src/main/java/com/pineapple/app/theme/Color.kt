package com.pineapple.app.theme

import androidx.compose.material3.ColorScheme
import androidx.compose.material3.darkColorScheme
import androidx.compose.material3.lightColorScheme
import androidx.compose.runtime.Composable
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.stringResource
import com.pineapple.app.R

val DeepSeaLight = lightColorScheme(
    primary = Color(0xFF215FA6),
    onPrimary = Color(0xFFFFFFFF),
    primaryContainer = Color(0xFFD5E3FF),
    onPrimaryContainer = Color(0xFF001C3B),
    secondary = Color(0xFF555F71),
    onSecondary = Color(0xFFFFFFFF),
    secondaryContainer = Color(0xFFD9E3F8),
    onSecondaryContainer = Color(0xFF121C2B),
    tertiary = Color(0xFF6E5676),
    onTertiary = Color(0xFFFFFFFF),
    tertiaryContainer = Color(0xFFF8D8FF),
    onTertiaryContainer = Color(0xFF27132F),
    error = Color(0xFFBA1A1A),
    errorContainer = Color(0xFFFFDAD6),
    onError = Color(0xFFFFFFFF),
    onErrorContainer = Color(0xFF410002),
    background = Color(0xFFFDFBFF),
    onBackground = Color(0xFF1A1C1E),
    surface = Color(0xFFFDFBFF),
    onSurface = Color(0xFF1A1C1E),
    surfaceVariant = Color(0xFFE0E2EC),
    onSurfaceVariant = Color(0xFF43474E),
    outline = Color(0xFF74777F),
    inverseOnSurface = Color(0xFFF1F0F4),
    inverseSurface = Color(0xFF2F3033),
    inversePrimary = Color(0xFFA6C8FF),
    surfaceTint = Color(0xFF215FA6)
)
val DeepSeaDark = darkColorScheme(
    primary = Color(0xFFA6C8FF),
    onPrimary = Color(0xFF003060),
    primaryContainer = Color(0xFF004787),
    onPrimaryContainer = Color(0xFFD5E3FF),
    secondary = Color(0xFFBDC7DC),
    onSecondary = Color(0xFF273141),
    secondaryContainer = Color(0xFF3D4758),
    onSecondaryContainer = Color(0xFFD9E3F8),
    tertiary = Color(0xFFDBBDE2),
    onTertiary = Color(0xFF3E2846),
    tertiaryContainer = Color(0xFF553F5D),
    onTertiaryContainer = Color(0xFFF8D8FF),
    error = Color(0xFFFFB4AB),
    errorContainer = Color(0xFF93000A),
    onError = Color(0xFF690005),
    onErrorContainer = Color(0xFFFFDAD6),
    background = Color(0xFF1A1C1E),
    onBackground = Color(0xFFE3E2E6),
    surface = Color(0xFF1A1C1E),
    onSurface = Color(0xFFE3E2E6),
    surfaceVariant = Color(0xFF43474E),
    onSurfaceVariant = Color(0xFFC4C6CF),
    outline = Color(0xFF8D9199),
    inverseOnSurface = Color(0xFF1A1C1E),
    inverseSurface = Color(0xFFE3E2E6),
    inversePrimary = Color(0xFF215FA6),
    surfaceTint = Color(0xFFA6C8FF),
)

val OrganicLight = lightColorScheme(
    primary = Color(0xFF496727),
    onPrimary = Color(0xFFFFFFFF),
    primaryContainer = Color(0xFFC9EE9E),
    onPrimaryContainer = Color(0xFF0F2000),
    secondary = Color(0xFF59614E),
    onSecondary = Color(0xFFFFFFFF),
    secondaryContainer = Color(0xFFDDE6CD),
    onSecondaryContainer = Color(0xFF171E0E),
    tertiary = Color(0xFF426462),
    onTertiary = Color(0xFFFFFFFF),
    tertiaryContainer = Color(0xFFC5EAE7),
    onTertiaryContainer = Color(0xFF00201F),
    error = Color(0xFFBA1A1A),
    errorContainer = Color(0xFFFFDAD6),
    onError = Color(0xFFFFFFFF),
    onErrorContainer = Color(0xFF410002),
    background = Color(0xFFFEFCF6),
    onBackground = Color(0xFF1B1C18),
    surface = Color(0xFFFEFCF6),
    onSurface = Color(0xFF1B1C18),
    surfaceVariant = Color(0xFFE2E4D8),
    onSurfaceVariant = Color(0xFF45483F),
    outline = Color(0xFF75786E),
    inverseOnSurface = Color(0xFFF2F1EB),
    inverseSurface = Color(0xFF30312D),
    inversePrimary = Color(0xFFAED285),
    surfaceTint = Color(0xFF496727)
)

val OrganicDark = darkColorScheme(
    primary = Color(0xFFAED285),
    onPrimary = Color(0xFF1D3700),
    primaryContainer = Color(0xFF324F10),
    onPrimaryContainer = Color(0xFFC9EE9E),
    secondary = Color(0xFFC1CAB2),
    onSecondary = Color(0xFF2B3322),
    secondaryContainer = Color(0xFF414937),
    onSecondaryContainer = Color(0xFFDDE6CD),
    tertiary = Color(0xFFA9CECA),
    onTertiary = Color(0xFF123634),
    tertiaryContainer = Color(0xFF2B4C4A),
    onTertiaryContainer = Color(0xFFC5EAE7),
    error = Color(0xFFFFB4AB),
    errorContainer = Color(0xFF93000A),
    onError = Color(0xFF690005),
    onErrorContainer = Color(0xFFFFB4AB),
    background = Color(0xFF1B1C18),
    onBackground = Color(0xFFE4E3DD),
    surface = Color(0xFF1B1C18),
    onSurface = Color(0xFFE4E3DD),
    surfaceVariant = Color(0xFF45483F),
    onSurfaceVariant = Color(0xFFC5C8BC),
    outline = Color(0xFF8F9287),
    inverseOnSurface = Color(0xFF30312D),
    inverseSurface = Color(0xFFE4E3DD),
    inversePrimary = Color(0xFF496727),
    surfaceTint = Color(0xFFAED285)
)

val StrawberryLight = lightColorScheme(
    primary = Color(0xFFA03F28),
    onPrimary = Color(0xFFFFFFFF),
    primaryContainer = Color(0xFFFFDAD2),
    onPrimaryContainer = Color(0xFF3D0700),
    secondary = Color(0xFF7A564D),
    onSecondary = Color(0xFFFFFFFF),
    secondaryContainer = Color(0xFFFFDAD2),
    onSecondaryContainer = Color(0xFF2E150E),
    tertiary = Color(0xFF6E5D28),
    onTertiary = Color(0xFFFFFFFF),
    tertiaryContainer = Color(0xFFF9E09F),
    onTertiaryContainer = Color(0xFF241A00),
    error = Color(0xFFBA1A1A),
    errorContainer = Color(0xFFFFDAD6),
    onError = Color(0xFFFFFFFF),
    onErrorContainer = Color(0xFF410002),
    background = Color(0xFFFFFBFF),
    onBackground = Color(0xFF201A19),
    surface = Color(0xFFFFFBFF),
    onSurface = Color(0xFF201A19),
    surfaceVariant = Color(0xFFF5DDD8),
    onSurfaceVariant = Color(0xFF534340),
    outline = Color(0xFF85736F),
    inverseOnSurface = Color(0xFFFBEEEB),
    inverseSurface = Color(0xFF362F2D),
    inversePrimary = Color(0xFFFFB4A3),
    surfaceTint = Color(0xFFA03F28)
)

val StrawberryDark = darkColorScheme(
    primary = Color(0xFFFFB4A3),
    onPrimary = Color(0xFF650033),
    primaryContainer = Color(0xFF8E004A),
    onPrimaryContainer = Color(0xFFFFD9E2),
    secondary = Color(0xFFE3BDC6),
    onSecondary = Color(0xFF422931),
    secondaryContainer = Color(0xFF5B3F47),
    onSecondaryContainer = Color(0xFFFFD9E2),
    tertiary = Color(0xFFEFBD94),
    onTertiary = Color(0xFF48290B),
    tertiaryContainer = Color(0xFF613F20),
    onTertiaryContainer = Color(0xFFFFDCC1),
    error = Color(0xFFFFB4AB),
    errorContainer = Color(0xFF93000A),
    onError = Color(0xFF690005),
    onErrorContainer = Color(0xFFFFDAD6),
    background = Color(0xFF201A1B),
    onBackground = Color(0xFFEBE0E1),
    surface = Color(0xFF201A1B),
    onSurface = Color(0xFFEBE0E1),
    surfaceVariant = Color(0xFF514347),
    onSurfaceVariant = Color(0xFFD5C2C6),
    outline = Color(0xFF9E8C90),
    inverseOnSurface = Color(0xFF201A1B),
    inverseSurface = Color(0xFFEBE0E1),
    inversePrimary = Color(0xFFB90063),
    surfaceTint = Color(0xFFFFB1C8)
)

val ZestLight = lightColorScheme(
    primary = Color(0xFF656100),
    onPrimary = Color(0xFFFFFFFF),
    primaryContainer = Color(0xFFEDE76D),
    onPrimaryContainer = Color(0xFF1E1C00),
    secondary = Color(0xFF626042),
    onSecondary = Color(0xFFFFFFFF),
    secondaryContainer = Color(0xFFE8E4BE),
    onSecondaryContainer = Color(0xFF1E1C05),
    tertiary = Color(0xFF3E6655),
    onTertiary = Color(0xFFFFFFFF),
    tertiaryContainer = Color(0xFFC0ECD6),
    onTertiaryContainer = Color(0xFF002115),
    error = Color(0xFFBA1A1A),
    errorContainer = Color(0xFFFFDAD6),
    onError = Color(0xFFFFFFFF),
    onErrorContainer = Color(0xFF410002),
    background = Color(0xFFFFFBFF),
    onBackground = Color(0xFF1C1C16),
    surface = Color(0xFFFFFBFF),
    onSurface = Color(0xFF1C1C16),
    surfaceVariant = Color(0xFFE7E3D1),
    onSurfaceVariant = Color(0xFF49473A),
    outline = Color(0xFF7A7768),
    inverseOnSurface = Color(0xFFF5F0E7),
    inverseSurface = Color(0xFF32302B),
    inversePrimary = Color(0xFFD1CB54),
    surfaceTint = Color(0xFF656100)
)

val ZestDark = darkColorScheme(
    primary = Color(0xFFD1CB54),
    onPrimary = Color(0xFF343200),
    primaryContainer = Color(0xFF4C4900),
    onPrimaryContainer = Color(0xFFEDE76D),
    secondary = Color(0xFFCCC8A4),
    onSecondary = Color(0xFF333118),
    secondaryContainer = Color(0xFF4A482C),
    onSecondaryContainer = Color(0xFFE8E4BE),
    tertiary = Color(0xFFA5D0BB),
    onTertiary = Color(0xFF0D3728),
    tertiaryContainer = Color(0xFF264E3E),
    onTertiaryContainer = Color(0xFFC0ECD6),
    error = Color(0xFFFFB4AB),
    errorContainer = Color(0xFF93000A),
    onError = Color(0xFF690005),
    onErrorContainer = Color(0xFFFFDAD6),
    background = Color(0xFF1C1C16),
    onBackground = Color(0xFFE6E2D9),
    surface = Color(0xFF1C1C16),
    onSurface = Color(0xFFE6E2D9),
    surfaceVariant = Color(0xFF49473A),
    onSurfaceVariant = Color(0xFFCAC7B5),
    outline = Color(0xFF949181),
    inverseOnSurface = Color(0xFF1C1C16),
    inverseSurface = Color(0xFFE6E2D9),
    inversePrimary = Color(0xFF656100),
    surfaceTint = Color(0xFFD1CB54)
)

@Composable
fun themeOptionMap(): MutableMap<String, Triple<ColorScheme, ColorScheme, String>> {
    return mutableMapOf(
        "THEME_DEEP_SEA" to Triple(DeepSeaLight, DeepSeaDark, stringResource(id = R.string.settings_theme_title_deep_sea)),
        "THEME_ORGANIC" to Triple(OrganicLight, OrganicDark, stringResource(id = R.string.settings_theme_title_organic)),
        "THEME_STRAWBERRY" to Triple(StrawberryLight, StrawberryDark, stringResource(id = R.string.settings_theme_title_strawberry)),
        "THEME_ZEST" to Triple(ZestLight, ZestDark, stringResource(id = R.string.settings_theme_title_zest))
    )
}